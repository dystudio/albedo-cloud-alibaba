<?xml version="1.0" encoding="utf-8"?>
<template>
	<name>resource</name>
	<filePath>src/main/java/${packageName}/${moduleName}/web/${subModuleName}</filePath>
	<fileName>${ClassName}Resource.java</fileName>
	<content><![CDATA[
/**
 * Copyright &copy; 2018 <a href="https://github.com/somewhereMrli/albedo-boot">albedo-boot</a> All rights reserved.
 */
package ${packageName}.${moduleName}.web<#if subModuleName != "">.${subModuleName}</#if>;

import com.albedo.java.common.core.constant.CommonConstants;
import com.albedo.java.common.core.exception.RuntimeMsgException;
import com.albedo.java.common.core.vo.PageModel;
import com.albedo.java.common.core.vo.TreeQuery;
import com.albedo.java.common.core.util.StringUtil;
import com.albedo.java.common.web.resource.DataVoResource;
import com.albedo.java.common.core.util.R;
import com.albedo.java.common.log.annotation.SysLog;
import ${packageName}.${moduleName}.domain.vo<#if subModuleName != "">.${subModuleName}</#if>.${ClassName}DataVo;
import ${packageName}.${moduleName}.service<#if subModuleName != "">.${subModuleName}</#if>.${ClassName}Service;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.google.common.collect.Lists;
import org.springframework.http.MediaType;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;

/**
 * ${functionName}Controller ${functionNameSimple}
 * @author ${functionAuthor}
 * @version ${functionVersion}
 */
@RestController
@RequestMapping(value = "/${urlPrefix}")
public class ${ClassName}Resource extends DataVoResource<${ClassName}Service, ${ClassName}DataVo> {

    public ${ClassName}Resource(${ClassName}Service service) {
        super(service);
    }

	/**
	 * @param id
	 * @return
	 */
	@GetMapping(CommonConstants.URL_ID_REGEX)
	@PreAuthorize("@pms.hasPermission('${permissionPrefix}_view')")
	public R get(@PathVariable String id) {
		logOperate.debug("REST request to get Entity : {}", id);
		return  R.buildOkData(service.findOneVo(id));
	}
	/**
	 * GET / : get all ${className}.
	 *
	 * @param pm the pagination information
	 * @return the R with status 200 (OK) and with body all ${className}
	 */

	@PreAuthorize("@pms.hasPermission('${permissionPrefix}_view')")
	@GetMapping("/")
	public R getPage(PageModel pm) {
		return R.buildOkData(service.findPage(pm));
	}

	/**
	 * POST / : Save a ${className}Vo.
	 *
	 * @param ${className}Vo the HTTP ${className}
	 */
	@PreAuthorize("@pms.hasPermission('${permissionPrefix}_edit')")
	@SysLog("新增/编辑${functionName}")
	@PostMapping(value = "/", produces = MediaType.APPLICATION_JSON_VALUE)
	public R save(@Valid @RequestBody ${ClassName}DataVo ${className}Vo) {
		logOperate.debug("REST request to save ${ClassName}Form : {}", ${className}Vo);
		<#assign firstListField = true><#list table.columnList as column>
			<#if column.unique && !column.pk>
		<#if firstListField><#assign firstListField = false>${ClassName}DataVo </#if>${className}Validate = new ${ClassName}DataVo();
		${className}Validate.setId(${className}Vo.getId());
		${className}Validate.set${column.simpleJavaField?cap_first}(${className}Vo.get${column.simpleJavaField?cap_first}());
		if (<#if column.null>StringUtil.isNotEmpty(${className}Vo.get${column.simpleJavaField?cap_first}()) && </#if>!checkByProperty(${className}Validate)) {
			throw new RuntimeMsgException(StringUtil.toAppendStr("保存${functionNameSimple}'", ${className}Vo.get${column.simpleJavaField?cap_first}(),"'失败，${column.title }已存在"));
		}
			</#if>
		</#list>
		service.save(${className}Vo);
		return R.buildOk("保存${functionNameSimple}成功");

	}

	/**
	 * DELETE //:ids : delete the "ids" ${ClassName}.
	 *
	 * @param ids the id of the ${className} to delete
	 * @return the R with status 200 (OK)
	 */
	@PreAuthorize("@pms.hasPermission('${permissionPrefix}_del')")
	@SysLog("删除${functionName}")
	@DeleteMapping(CommonConstants.URL_IDS_REGEX)
	public R delete(@PathVariable String ids) {
		logOperate.debug("REST request to delete ${ClassName}: {}", ids);
		service.deleteBatchIds(Lists.newArrayList(ids.split(StringUtil.SPLIT_DEFAULT)));
		return R.buildOk("删除${functionNameSimple}成功");
	}
}]]>
	</content>
</template>
